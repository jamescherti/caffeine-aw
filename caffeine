#!/usr/bin/env python3
#
# Copyright Â© 2009-2020 The Caffeine Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging
import argparse
import signal
from subprocess import call
import sys

import pkg_resources
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import GObject, Gtk, GLib

from ewmh import EWMH


PROGRAM_NAME = 'caffeine'


class Caffeine(GObject.GObject):
    def __init__(self):
        GObject.GObject.__init__(self)
        self.windows_inhibited = set()
        self.windows_normal = {}
        self.windows_fullscreen = {}

        # Add hook for full-screen check (same interval as mplayer's heartbeat command)
        # FIXME: add capability to xdg-screensaver to report timeout
        GLib.timeout_add_seconds(30, self._check_for_fullscreen_all_windows)

    def _check_for_fullscreen_all_windows(self):
        list_win = ewmh.getClientList()

        # Find full-screen windows
        self.windows_fullscreen = {}
        self.windows_normal = {}
        for win in list_win:
            hex_win_id = hex(win.id)

            try:
                wm_state = ewmh.getWmState(win, str=True)
                if '_NET_WM_STATE_FULLSCREEN' in wm_state:
                    self.windows_fullscreen[hex_win_id] = (win, wm_state)
                else:
                    self.windows_normal[hex_win_id] = (win, wm_state)
            # pylint: disable=broad-except
            except Exception:
                pass

        # Suspend windows
        inhibited_win = set()
        for hex_win_id in self.windows_fullscreen:
            if hex_win_id in self.windows_inhibited:
                continue

            call(['xdg-screensaver', 'suspend', hex_win_id])
            inhibited_win.add(hex_win_id)

        if inhibited_win:
            logging.info(
                "%s is inhibiting desktop idleness (win id: %s)",
                PROGRAM_NAME, ', '.join(sorted(inhibited_win))
            )

        # Resume
        self.windows_inhibited = self.windows_inhibited | inhibited_win
        self.release()

        # Return True so timeout is rerun
        return True

    def release(self):
        if not self.windows_inhibited:
            return

        all_windows = self.windows_normal | self.windows_fullscreen

        resumed_win_id = set()
        for hex_win_id in self.windows_inhibited:
            if hex_win_id in all_windows and \
                    hex_win_id not in self.windows_normal:
                continue

            if hex_win_id in all_windows:
                call(['xdg-screensaver', 'resume', hex_win_id])

            resumed_win_id.add(hex_win_id)

        self.windows_inhibited -= resumed_win_id

        if resumed_win_id:
            logging.info(
                "%s is no longer inhibiting desktop idleness (win id: %s)",
                PROGRAM_NAME, ', '.join(sorted(resumed_win_id))
            )


# Adapted from http://stackoverflow.com/questions/26388088/python-gtk-signal-handler-not-working
def InitSignal():
    def signal_action(signal):
        caffeine.release()
        sys.exit(1)

    def idle_handler(*args):
        GLib.idle_add(signal_action, priority=GLib.PRIORITY_HIGH)

    def handler(*args):
        signal_action(args[0])

    def install_glib_handler(sig):
        # GLib.unix_signal_add was added in glib 2.36
        GLib.unix_signal_add(GLib.PRIORITY_HIGH, sig, handler, sig)

    for sig in [signal.SIGINT, signal.SIGTERM, signal.SIGHUP]:
        signal.signal(sig, idle_handler)
        GLib.idle_add(install_glib_handler, sig, priority=GLib.PRIORITY_HIGH)


logging.basicConfig(level=logging.INFO, stream=sys.stdout,
                    format="%(asctime)s %(name)s: %(message)s")

# Handle command-line arguments
parser = argparse.ArgumentParser(prog=PROGRAM_NAME, description='Prevent desktop idleness in full-screen mode')
parser.add_argument('-V', '--version', action='version', version=PROGRAM_NAME + ' ' + pkg_resources.require("caffeine-aw")[0].version)
parser.parse_args()

ewmh = EWMH()
caffeine = Caffeine()
InitSignal()
Gtk.main()
